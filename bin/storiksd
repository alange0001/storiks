#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Adriano Lange <alange0001@gmail.com>

Copyright (c) 2020-present, Adriano Lange.  All rights reserved.
This source code is licensed under both the GPLv2 (found in the
LICENSE file in the root directory) and Apache 2.0 License
(found in the LICENSE.Apache file in the root directory).
"""

import os
import re
import subprocess
import sys
import signal
import psutil
import time
import threading
import argparse
import traceback
import shlex
import shutil
import json
import lzma
import datetime
import storiks
from storiks.util import coalesce, getenv_default, get_recursive, env_as_bool

# =============================================================================
import logging
log = logging.getLogger('storiksd')
log.setLevel(logging.INFO)

# =============================================================================
args = None


# =============================================================================
class CommunicationFiles:
	basedir = os.getenv('STORIKS_COMMUNICATION_DIR')
	id = f'{basedir}/id'
	notebook_url = f'{basedir}/{storiks.NOTEBOOK_URL_FILE}'
	storiksd_socket = f'{basedir}/storiksd.socket'

	@classmethod
	def wipe(cls):
		if cls.basedir is None or not os.path.isdir(cls.basedir):
			raise Exception(f'invalid communication directory: {cls.basedir}')

		for f in [
			cls.id,
			cls.notebook_url,
		]:
			if os.path.isfile(f):
				log.info(f'removing old file: {f}')
				os.remove(f)


# =============================================================================
class Program:
	def get_args(self):
		_function_ = 'Program.get_args()'
		parser = argparse.ArgumentParser(
			description="Storiks Daemon")
		parser.add_argument('-l', '--log_level', type=str,
							default=getenv_default('STORIKS_LOG_LEVEL', 'INFO'),
							choices=['debug', 'DEBUG', 'info', 'INFO'],
							help='Log level.')

		args = parser.parse_args()

		log_h = logging.StreamHandler()
		log_h.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s: %(message)s'))
		# log_h.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
		log.addHandler(log_h)
		log.setLevel(getattr(logging, args.log_level.upper()))

		return args

	def main(self) -> int:
		_function_ = 'Program.main()'
		global args

		for i in ('SIGINT', 'SIGTERM'):
			signal.signal(getattr(signal, i),
						  lambda signumber, stack, signame=i: signal_handler(signame,  signumber, stack))

		try:
			args = self.get_args()
			log.info(f'storiksd version {storiks.PROJECT_VERSION}')
			log.debug(f'\t{_function_}: Args: {str(args)}')
			log.info(f'\t{os.environ}')

			CommunicationFiles.wipe()
			self.set_basic_files()
			self.create_user_groups()
			self.set_etc_profile()

			nbserver = NotebookServer()
			perfmon = Performancemonitor() if env_as_bool('STORIKS_RUN_PERFMON') else None
			socket = CommandServer()

			time.sleep(1)
			while True:  # main loop
				if perfmon is not None and perfmon.check_status() is not None:
					log.error(f'performancemonitor is not running')
				if nbserver.check_status() is not None:
					raise Exception(f'jupyter-notebook is not running')
				time.sleep(5)

		except Exception as e:
			if log.level == logging.DEBUG:
				exc_type, exc_value, exc_traceback = sys.exc_info()
				sys.stderr.write('main exception:\n' +
								 ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback)) + '\n')
			else:
				sys.stderr.write(str(e) + '\n')
			return 1
		return 0

	def set_basic_files(self):
		_function_ = 'Program.set_basic_files()'
		log.debug(_function_)
		metadata = self.get_container_metadata()
		id = get_recursive(metadata, 'Id')
		if id is None or not isinstance(id, str):
			raise Exception(f'failed to get container Id: {id}')
		log.info(f'container id: {id}')
		with open(CommunicationFiles.id, 'wt') as f:
			f.write(f'{id}\n')

	def get_container_metadata(self, name='storiks'):
		_function_ = 'Program.get_container_metadata()'
		log.debug(_function_)
		st, out = subprocess.getstatusoutput(f'docker inspect "{name}"')
		if st == 0:
			j = json.loads(out)
			if len(j) > 0:
				return j[0]
		return None

	def set_etc_profile(self):
		_function_ = 'Program.set_etc_profile()'
		log.debug(_function_)
		envlist = os.getenv('STORIKS_PRESERVE_ENVS')
		if envlist is not None:
			log.info('saving main environment variables in /etc/profile.d/storiks.sh')
			envlist = envlist.split(',')
			with open('/etc/profile.d/storiks.sh', 'wt') as f:
				storiks_path = os.getenv('STORIKS_PATH')
				if storiks_path is not None:
					f.write(f'export PATH="{storiks_path}:$PATH"\n')
				for e in envlist:
					v = os.getenv(e)
					if v is not None:
						f.write(f'export {e}="{v}"\n')
		else:
			log.warning('undefined environment variable STORIKS_PRESERVE_ENVS')

	def create_user_groups(self):
		_function_ = 'Program.create_user_groups()'

		def test_create_group(gid, groupname):
			if not execute(f'getent group "{groupname}" >/dev/null', False, False):
				log.info(f'creating group {groupname}, gid={gid}')
				execute(f'groupadd -g {gid} "{groupname}"', False)

		for e in [  # required environment variables
			'STORIKS_USER', 'STORIKS_USER_UID', 'STORIKS_USER_GID', 'STORIKS_USER_IDS'
		]:
			if os.getenv(e) is None:
				raise Exception(f'undefined environment variable: {e}')

		id_line = os.getenv('STORIKS_USER_IDS')
		log.debug(f'{_function_}: STORIKS_USER_IDS = {id_line}')
		if id_line is None:
			log.warning('undefined environment variable STORIKS_USER_IDS')
			return

		r = re.findall(r'gid=([0-9]+)\((\w+)\)', id_line)
		log.debug(f'{_function_}: r = {r}')
		gid = 0
		if len(r) > 0:
			gid = r[0][0]
			test_create_group(r[0][0], r[0][1])

		r = re.findall(r'groups=(.*)', id_line)
		log.debug(f'{_function_}: r = {r}')
		group_list = []
		if len(r) > 0:
			for gaux in r[0].split(','):
				r2 = re.findall(r'([0-9]+)\(([^\)]+)\)', gaux)
				log.debug(f'{_function_}: gaux = {gaux}; r2 = {r2}')
				if len(r2) > 0:
					group_list.append(r2[0][0])
					test_create_group(r2[0][0], r2[0][1])

		r = re.findall(r'uid=([0-9]+)\((\w+)\)', id_line)
		log.debug(f'{_function_}: r = {r}')
		if len(r) > 0:
			uid, username = r[0][0], r[0][1]
			if not execute(f'getent passwd "{username}" >/dev/null', False, False):
				additional_groups = f'-G {",".join(group_list)}' if len(group_list) > 0 else ''
				log.info(f'creating user {username}, uid={uid}')
				execute(f'useradd -u {uid} -g {gid} {additional_groups} -d /home/user '
						f'--shell /bin/bash "{username}"', False)


# =============================================================================
class CommandServer:
	_count = 0  # client connections counter
	_stop = False
	_socket = None
	_worker = None

	_scheduled_commands_lock = None
	_scheduled_commands = None
	_current_command_idx = -1

	def __init__(self):
		self._scheduled_commands = list()
		self._scheduled_commands_lock = threading.Lock()
		self._socket = storiks.util.SocketServer(
			CommunicationFiles.storiksd_socket,
			lambda obj: self.connection_handler(obj),
			chown=(int(os.getenv('STORIKS_USER_UID')), 0),
			log=log)

		self._worker = threading.Thread(name='CommandServer.worker', target=lambda: self.worker())
		self._worker.daemon = True
		self._worker.start()
		self._worker.join()

	def __del__(self):
		self._stop = True
		c = 0
		while self._worker.is_alive() and c < 8:
			time.sleep(0.25)
			c += 1
		del self._socket

	def add_command(self, commandObj):
		last = None
		with self._scheduled_commands_lock:
			self._scheduled_commands.append(commandObj)
			last = len(self._scheduled_commands)-1
		commandObj.set_n(last)
		log.info(f'CommandServer: command number {last} scheduled')
		return last

	def worker(self):
		log.info('CommandServer: worker started')
		while not self._stop:
			current_obj = None
			current_idx = None
			with self._scheduled_commands_lock:
				sl = len(self._scheduled_commands)
				if sl > 0 and self._current_command_idx < sl-1:
					self._current_command_idx += 1
					current_idx = self._current_command_idx
					current_obj = self._scheduled_commands[current_idx]

			if current_obj is not None and current_obj.scheduled():
				log.info(f'CommandServer: starting scheduled command {current_idx}')
				current_obj.start()
				current_status = None
				while not self._stop and current_status is None:
					time.sleep(0.5)
					if current_obj.cancel_flag():
						current_obj.cancel()
					current_status = current_obj.check_status()
				if current_status is not None:
					if current_status == 0:
						log.info(f'CommandServer: scheduled command {current_idx} terminated with exit code {current_status}')
					else:
						log.error(f'CommandServer: scheduled command {current_idx} terminated with exit code {current_status}')
			else:
				time.sleep(0.5)
		log.info('CommandServer: worker finished')

	def get_scheduled_command(self, number):
		ret = None
		with self._scheduled_commands_lock:
			if number is None:
				number = len(self._scheduled_commands) - 1
			if 0 <= number < len(self._scheduled_commands):
				ret = self._scheduled_commands[number]
		return ret

	def connection_handler(self, handlerObj):  # one thread per SocketServer connection
		self._count += 1
		count = self._count
		_function_ = f'{self.__class__.__name__}[{count}].handle()'

		def send(msg):
			encoded = bytes(f'{msg}\n', 'utf-8')
			log.debug(f'{_function_} sending: {msg}')
			handlerObj.request.sendall(encoded)

		def print_message(arg1, arg2, *args):
			send(arg1 if isinstance(arg1, str) else arg2)

		def receive() -> str:
			return str(handlerObj.request.recv(1024), 'utf-8').strip()

		def get_parser():
			ret = argparse.ArgumentParser("", add_help=True)
			ret._print_message = print_message
			subparser = ret.add_subparsers(dest='action', title='Available Actions')
			# -------------------------
			parser2 = subparser.add_parser('help', help='print help')
			parser2._print_message = print_message
			# -------------------------
			parser2 = subparser.add_parser('test', help='test socket communication')
			parser2._print_message = print_message
			# -------------------------
			parser2 = ScheduledCommand.register_args(subparser)
			parser2._print_message = print_message
			# -------------------------
			parser2 = subparser.add_parser('list', help='list scheduled commands')
			parser2.add_argument('--json', default=False, action='store_true',
					help='json format')
			parser2._print_message = print_message
			# -------------------------
			parser2 = subparser.add_parser('status', help='print the status of a schedule command')
			parser2.add_argument('number', default=None, type=int, nargs='?',
					help='command number')
			parser2.add_argument('--json', default=False, action='store_true',
					help='json format')
			parser2._print_message = print_message
			# -------------------------
			parser2 = subparser.add_parser('cancel', help='cancel a schedule command')
			parser2.add_argument('number', default=None, type=int, nargs='?',
					help='command number')
			parser2._print_message = print_message
			return ret

		try:
			parser = get_parser()

			cmd = receive()
			log.info(f'CommandServer connection [{count}] message: ' + cmd if len(cmd) < 70 else (cmd[0:66]+' ...'))
			cmd_args = parser.parse_args(shlex.split(cmd))

			if cmd_args.action == 'test':
				send('test ok!')

			if cmd_args.action == 'help':
				parser.print_help()

			elif cmd_args.action == 'schedule':
				sc = ScheduledCommand(cmd_args)
				idx = self.add_command(sc)
				send(f'command {idx} scheduled')

			elif cmd_args.action == 'list':
				sclist = []
				with self._scheduled_commands_lock:
					for i in range(len(self._scheduled_commands)):
						sc = self._scheduled_commands[i]
						sclist.append(sc.describe('dict'))
				if cmd_args.json:
					ret = json.dumps(sclist)
				else:
					fstring = '{:>4}  {:<10}  {:<19}  {:<19}  {}'
					ret = fstring.format('num.', 'status', 'start', 'end', 'command')
					ret += '\n----------------------------------------------------------------------------------------'
					for i in sclist:
						aux = i['command'] if len(i['command']) <= 50 else (i['command'][0:46] + ' ...')
						ret += '\n' + fstring.format(
							i['number'],
							i['status'],
							i['start'] if i['start'] is not None else '',
							i['end'] if i['end'] is not None else '',
							aux)
				send(ret)

			elif cmd_args.action == 'status':
				sc = self.get_scheduled_command(cmd_args.number)
				if sc is not None:
					send(sc.describe('json' if cmd_args.json else 'text'))
				else:
					send(f'ERROR: there is no scheduled commands or the informed number is out of range')

			elif cmd_args.action == 'cancel':
				sc = self.get_scheduled_command(cmd_args.number)
				if sc is not None:
					sc.cancel_flag(True)
					if sc.exitcode() is None:
						send(f'command number {sc.n()} scheduled to cancel')
					else:
						send(f'command number {sc.n()} already finished with exit code {sc.exitcode()}')
				else:
					send(f'ERROR: there is no scheduled commands or the informed number is out of range')

		except Exception as e:
			log.error(f'CommandServer connection [{count}] exception: {str(e)}')
			send(f'ERROR: {str(e)}')

		log.info(f'CommandServer connection [{count}] closed.')


# =============================================================================
class ScheduledCommand:
	ST_SCHEDULED = 0
	ST_CANCELED  = 1
	ST_RUNNING   = 2
	ST_FINISHED  = 3
	ST_FAIL      = 4
	STATUS_NAMES = ['scheduled', 'canceled', 'running', 'finished', 'fail']

	@classmethod
	def register_args(cls, subparser):
		parser2 = subparser.add_parser('schedule', help='schedule command')
		parser2.add_argument('--output', type=str,
				help=f'output file (saved in host:{os.getenv("STORIKS_OUTPUT_DIR")}, guest:/output)')
		parser2.add_argument('--overwrite', default=False, action='store_true',
				help='overwrite (truncate) output file')
		parser2.add_argument('--append', default=False, action='store_true',
				help='append output file if it exists')
		parser2.add_argument('--compress', default=False, action='store_true',
				help='compress output using xz format (lzma module)')
		parser2.add_argument('--quiet', default=False, action='store_true', help='suppress any output')
		parser2.add_argument('cmd', help='command to be executed')
		parser2.add_argument('cmd_args', nargs=argparse.REMAINDER)
		return parser2

	_n = -1
	_args = None
	_process = None
	_thread_stdout = None
	_thread_stderr = None
	_status = None
	_exitcode = None
	_fail_msg = ''
	_time_start = None
	_time_end = None
	_cancel_flag = False
	_output_file = None
	_output_file_lock = None

	def __init__(self, args):
		self._args = args
		self._status = self.ST_SCHEDULED

	def set_n(self, n):
		self._n = n

	def start(self):
		try:
			if self._status == self.ST_SCHEDULED and self._cancel_flag:
				self._status = self.ST_CANCELED

			if self._status != self.ST_SCHEDULED:
				raise Exception(f'Command number {self._n} should have the status '
								f'"{self.STATUS_NAMES[self.ST_SCHEDULED]}," but it has the '
								f'status "{self.STATUS_NAMES[self._status]}."')

			if not self._args.quiet and self._args.output is not None:
				self._output_file_lock = threading.Lock()
				open_f = open if not self._args.compress else lzma.open
				outpath = os.path.join('/output', self._args.output)
				log.info(f'{self.__class__.__name__}: set output file to "{outpath}"')
				if os.path.exists(outpath):
					if self._args.overwrite:
						self._output_file = open_f(outpath, 'wt')
					elif self._args.append:
						self._output_file = open_f(outpath, 'at')
					else:
						raise Exception(f'Output file "{self._args.output}" already exists. '
								'Use either another filename, --overwrite, or --append.')
				else:
					self._output_file = open_f(outpath, 'xt')
				try:
					os.chown(outpath, int(os.getenv('STORIKS_USER_UID')), int(os.getenv('STORIKS_USER_GID')))
				except Exception as e:
					raise Exception(f'failed to set the owner of file {self._args.output}: {str(e)}')

			cmd = [
				'su', '-l', os.getenv('STORIKS_USER'), '-c',
				'cd /output && ' + shlex.join([self._args.cmd] + self._args.cmd_args)
			]
			self._process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			self._status = self.ST_RUNNING
			self._time_start = datetime.datetime.now()

			self._thread_stdout = threading.Thread(
				name='ScheduledCommand.stdout',
				target=lambda: self._handle_process_output(self._process.stdout))
			self._thread_stdout.daemon = True
			self._thread_stdout.start()
			self._thread_stderr = threading.Thread(
				name='ScheduledCommand.stderr',
				target=lambda: self._handle_process_output(self._process.stderr))
			self._thread_stderr.daemon = True
			self._thread_stderr.start()

		except Exception as e:
			self._handle_exception(e)

	def _kill_and_close(self):
		try:
			if self._process is not None:
				self._process.kill()
				time.sleep(0.2)
				for p in psutil.Process(self._process.pid).children(recursive=True):
					p.kill()
				try:
					self._exitcode = self._process.wait(4)
				except subprocess.TimeoutExpired:
					log.error(f'{self.__class__.__name__}: the process is still running')
				self._time_end = datetime.datetime.now()
			if self._output_file is not None:
				self._output_file.close()
				self._output_file = False
		except Exception as e2:
			log.error(f'{self.__class__.__name__} unexpected exception ({e.__class__.__name__}): {str(e2)}')

	def cancel_flag(self, val=None):
		if val is not None:
			self._cancel_flag = val
		return self._cancel_flag

	def cancel(self):
		if self._status == self.ST_SCHEDULED:
			self._status = self.ST_CANCELED
		elif self._status == self.ST_RUNNING:
			self._status = self.ST_CANCELED
			self._kill_and_close()

	def _handle_exception(self, e):
		self._fail_msg = f'exception ({e.__class__.__name__}): {str(e)}'
		self._exitcode = -990
		self._status = self.ST_FAIL
		log.error(self._fail_msg)
		self._kill_and_close()

	def _handle_process_output(self, file):
		try:
			while not self._status == self.ST_RUNNING and file.readable():
				line = file.readline().decode()
				if not self._args.quiet and len(line) > 0:
					self._handle_line(line)
		except Exception as e:
			self._handle_exception(e)

	def _handle_line(self, line):  # called by 2 threads (stdout and stdin)
		if self._output_file is not None:
			with self._output_file_lock:
				self._output_file.write(line)
		else:
			sys.stderr.write('ScheduledCommand: ' + line)

	def check_status(self):  # None if not started or still running
		_function_ = f'{self.__class__.__name__}.check_status()'
		if self._status != self.ST_RUNNING:
			return self._exitcode
		try:
			st = self._process.wait(0)
			self._exitcode = st
			self._status = self.ST_FINISHED if st == 0 else self.ST_FAIL
			self._time_end = datetime.datetime.now()
			if st != 0:
				self._fail_msg = f'exit code {st}'
				log.error(self._fail_msg)
			if self._output_file is not None:
				self._output_file.close()
				self._output_file = False
			return st
		except subprocess.TimeoutExpired:
			return None
		except Exception as e:
			self._fail_msg = f'unexpected exception ({e.__class__.__name__}): {str(e)}'
			log.error(f'{_function_} unexpected exception ({e.__class__.__name__}): {str(e)}')
			return -999

	def get_status(self): return self.STATUS_NAMES[self._status]
	def get_command(self, maxlength=None):
		ret = f'{self._args.cmd} {shlex.join(self._args.cmd_args)}'
		if maxlength is not None and (0 < maxlength < len(ret)):
			ret = ret[0:maxlength] + '...'
		return ret
	def scheduled(self):  return (self._status == self.ST_SCHEDULED)
	def running(self): return (self._status == self.ST_RUNNING)
	def fail_msg(self): return self._fail_msg
	def exitcode(self): return self._exitcode
	def n(self): return self._n
	def describe(self, output_format='text'):
		aux = {
			'number'   : self._n,
			'command'  : self.get_command(),
			'status'   : self.get_status(),
			'start'    : self._time_start.strftime('%Y-%m-%d %H:%M:%S') if self._time_start is not None else None,
			'end'      : self._time_end.strftime('%Y-%m-%d %H:%M:%S') if self._time_end is not None else None,
			'exitcode' : self._exitcode,
			'fail_msg' : self._fail_msg,
		}
		if output_format == 'json':
			ret = json.dumps(aux)
		elif output_format == 'text':
			ret = f'ScheduledCommand:'
			for k, v in aux.items():
				ret += '\n\t{:>10} = {}'.format(k, v if v is not None else '')
		if output_format == 'dict':
			ret = aux
		return ret


# =============================================================================
class NotebookServer:
	_process = None
	_thread_stdout = None
	_thread_stderr = None
	_url = None
	_url_filename_guest = None

	def __init__(self):
		_function_ = 'NotebookServer'
		log.debug(f'{_function_}: constructor')
		if os.getenv('STORIKS_USER') is None:
			raise Exception(f'Failed to start jupyter-notebook. Environment variable STORIKS_USER not defined.')

		self._copy_examples()

		cmd = [
			'su', '-l', os.getenv('STORIKS_USER'), '-c',
			'cd /output && /usr/local/conda/bin/jupyter-notebook --ip=\'*\' --no-browser'
		]
		log.info(f'{_function_}: starting jupyter-notebook')
		self._process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

		self._thread_stdout = threading.Thread(name='NotebookServer.stdout', target=lambda: self._handle_stdout())
		self._thread_stdout.daemon = True
		self._thread_stdout.start()
		self._thread_stderr = threading.Thread(name='NotebookServer.stderr', target=lambda: self._handle_stderr())
		self._thread_stderr.daemon = True
		self._thread_stderr.start()

	def __del__(self):
		self._process.kill()

	def check_status(self):
		_function_ = 'NotebookServer.check_status()'
		try:
			st = self._process.wait(0)
			if st != 0:
				log.error(f'NotebookServer exit code {st}')
			return st
		except subprocess.TimeoutExpired:
			return None
		except Exception as e:
			log.error(f'{_function_}: unexpected exception: {str(e)}')
			return -999

	def _copy_examples(self):
		_function_ = 'NotebookServer._copy_examples()'
		src = '/opt/storiks/examples'
		dst = '/output'
		try:
			if not os.path.isdir(src):
				raise Exception(f'invalid source directory: {src}')
			if not os.path.isdir(dst):
				raise Exception(f'invalid destination directory: {dst}')
			for f in os.listdir(src):
				fs = os.path.join(src, f)
				fd = os.path.join(dst, f)
				if os.path.isfile(fs) and not os.path.exists(fd):
					log.info(f'copy example file: {f}')
					shutil.copy(fs, fd)
					shutil.chown(fd, os.getenv('STORIKS_USER'))
		except Exception as e:
			log.error(f'Failed to copy notebook examples: {str(e)}')

	def _handle_stdout(self):
		_function_ = 'NotebookServer._handle_stdout()'
		log.debug(f'{_function_}')
		while self._process.returncode is None and self._process.stdout.readable():
			line = self._process.stdout.readline().decode()
			if len(line) > 0:
				sys.stdout.write('NotebookServer: ' + line)

	def _handle_stderr(self):
		_function_ = 'NotebookServer._handle_stderr()'
		log.debug(f'{_function_}')
		while self._process.returncode is None and self._process.stderr.readable():
			line = self._process.stderr.readline().decode()
			if len(line) > 0:
				sys.stderr.write('NotebookServer: ' + line)
			if self._url is None:
				r = re.findall(r'http://.+/\?token=.*', line)
				if len(r) > 0:
					log.debug(f'{_function_}: r = {r}')
					self._url = r[0]
					with open(CommunicationFiles.notebook_url, 'wt') as f:
						f.write(f'{self._url}\n')

# =============================================================================
class Performancemonitor:
	_process = None
	_thread_stdout = None
	_thread_stderr = None

	def __init__(self):
		_function_ = 'Performancemonitor'
		log.debug(f'{_function_}: constructor')

		cmd = ['performancemonitor']
		log.info(f'{_function_}: starting performancemonitor')
		self._process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

		self._thread_stdout = threading.Thread(name='Performancemonitor.stdout', target=lambda: self._handle_stdout())
		self._thread_stdout.daemon = True
		self._thread_stdout.start()
		self._thread_stderr = threading.Thread(name='Performancemonitor.stderr', target=lambda: self._handle_stderr())
		self._thread_stderr.daemon = True
		self._thread_stderr.start()

	def __del__(self):
		self._process.kill()

	def check_status(self):
		_function_ = 'Performancemonitor.check_status()'
		try:
			st = self._process.wait(0)
			if st != 0:
				log.error(f'performancemonitor exit code {st}')
			return st
		except subprocess.TimeoutExpired:
			return None
		except Exception as e:
			log.error(f'{_function_}: unexpected exception: {str(e)}')
			return -999

	def _handle_stdout(self):
		_function_ = 'Performancemonitor._handle_stdout()'
		log.debug(f'{_function_}')
		while self._process.returncode is None and self._process.stdout.readable():
			line = self._process.stdout.readline().decode()
			if len(line) > 0:
				sys.stdout.write('Performancemonitor: ' + line)

	def _handle_stderr(self):
		_function_ = 'Performancemonitor._handle_stderr()'
		log.debug(f'{_function_}')
		while self._process.returncode is None and self._process.stderr.readable():
			line = self._process.stderr.readline().decode()
			if len(line) > 0:
				sys.stderr.write('Performancemonitor: ' + line)

# =============================================================================
def execute(cmd: str, raise_except=True, show_error=True) -> bool:
	_function_ = 'execute()'
	log.debug(f'{_function_}: command: {cmd}')
	r = os.system(cmd)
	log.debug(f'{_function_}: exit code = {r}')
	if r != 0:
		if raise_except:
			raise Exception(f'command returned error code {r}: {cmd}')
		else:
			if show_error:
				log.error(f'command returned error code {r}: {cmd}')
			return False
	return True

# =============================================================================
def signal_handler(signame, signumber, stack):
	def kill_process(p_):
		try:
			log.warning(f'Child process {p_.pid} is still running. Sending signal {signame}.')
			p_.send_signal(signumber)
		except Exception as e:
			sys.stderr.write(f'signal_handler exception (kill_process): {str(e)}\n')

	try:
		log.info(f'signal {signame} received')
		for p in psutil.Process().children(recursive=False):
			kill_process(p)
		for i in range(0, 20):
			time.sleep(0.2)
			if len(psutil.Process().children(recursive=True)) == 0:
				break
		for p in psutil.Process().children(recursive=True):
			kill_process(p)
		exit(0)

	except Exception as e:
		sys.stderr.write(f'signal_handler exception: {str(e)}\n')
		exit(1)


# =============================================================================
if __name__ == '__main__':
	exit(Program().main())
